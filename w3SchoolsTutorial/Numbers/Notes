JavaScript has only one type of number. Numbers can be written with or without decimals.

Extra large or extra small numbers can be written with scientific (exponent) notation:

Example
var x = 123e5;    // 12300000
var y = 123e-5;   // 0.00123

Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

Example
var x = 999999999999999;   // x will be 999999999999999
var y = 9999999999999999;  // y will be 10000000000000000

The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:

Example
var x = 0.2 + 0.1;         // x will be 0.30000000000000004

To solve the problem above, it helps to multiply and divide:

Example
var x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3


***JavaScript will try to convert strings to numbers in all numeric operations:

This will work:

var x = "100";
var y = "10";
var z = x / y;       // z will be 10

This will also work:

var x = "100";
var y = "10";
var z = x * y;       // z will be 1000

And this will work:

var x = "100";
var y = "10";
var z = x - y;       // z will be 90

But this will not work:

var x = "100";
var y = "10";
var z = x + y;       // z will not be 110 (It will be 10010)


***You can use the global JavaScript function isNaN() to find out if a value is a number:

Example
var x = 100 / "Apple";
isNaN(x);               // returns true because x is Not a Number

****NaN is a number: typeof NaN returns number

Infinity
Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.

Example
var myNumber = 2;
while (myNumber != Infinity) {   // Execute until Infinity
  myNumber = myNumber * myNumber;


Hexadecimal
JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

Example
var x = 0xFF;        // x will be 255

***Never write a number with a leading zero (like 07).
***Some JavaScript versions interpret numbers as octal if they are written with a leading zero.


****************** By default, JavaScript displays numbers as base 10 decimals.

                   But you can use the toString() method to output numbers from base 2 to base 36.

                   Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.

                   Example
                   var myNumber = 32;
                   myNumber.toString(10);  // returns 32
                   myNumber.toString(32);  // returns 10
                   myNumber.toString(16);  // returns 20
                   myNumber.toString(8);   // returns 40
                   myNumber.toString(2);   // returns 100000