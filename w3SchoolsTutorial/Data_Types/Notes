** JavaScript evaluates expressions from left to right. Different sequences can produce different results:
JavaScript:
var x = 16 + 4 + "Volvo";

Result:
20Volvo

*** JavaScript has dynamic types. This means that the same variable can be used to hold different data types:

Example
var x;           // Now x is undefined
x = 5;           // Now x is a Number
x = "John";      // Now x is a String

*** You can use quotes inside a string, as long as they don't match the quotes surrounding the string:

    Example
    var answer1 = "It's alright";             // Single quote inside double quotes
    var answer2 = "He is called 'Johnny'";    // Single quotes inside double quotes
    var answer3 = 'He is called "Johnny"';    // Double quotes inside single quotes

*** JavaScript has only one type of numbers.

    Numbers can be written with, or without decimals:

    Example
    var x1 = 34.00;     // Written with decimals
    var x2 = 34;        // Written without decimals

*** Extra large or extra small numbers can be written with scientific (exponential) notation:

    Example
    var y = 123e5;      // 12300000
    var z = 123e-5;     // 0.00123

*** JavaScript arrays are written with square brackets.

    Array items are separated by commas.

    The following code declares (creates) an array called cars, containing three items (car names):

    Example
    var cars = ["Saab", "Volvo", "BMW"];

*** JavaScript objects are written with curly braces {}.

    Object properties are written as name: value pairs, separated by commas.

    Example
    var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

*** In JavaScript, a variable without a value, has the value undefined. The type is also undefined.
    Example
    var car;    // Value is undefined, type is undefined

*** Any variable can be emptied, by setting the value to undefined. The type will also be undefined.

    Example
    car = undefined;    // Value is undefined, type is undefined

*** In JavaScript null is "nothing". It is supposed to be something that doesn't exist.

    Unfortunately, in JavaScript, the data type of null is an object.

    You can consider it a bug in JavaScript that typeof null is an object. It should be null.

    You can empty an object by setting it to null:

    Example
    var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
    person = null;    // Now value is null, but type is still an object

*** You can also empty an object by setting it to undefined:

    Example
    var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
    person = undefined;   // Now both value and type is undefined

*** Difference Between Undefined and Null
    undefined and null are equal in value but different in type:

    typeof undefined           // undefined
    typeof null                // object

    null === undefined         // false
    null == undefined          // true
